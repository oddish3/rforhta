---
title: "Install R/Rstudio"
---

[slides from the workshop](../meta/01/R_Workshop.pdf)

This will (hopefully) walk you through installing R (the language) and Rstudio (the language editor) to do some Rstats!
This is similar to writing some English (the language) in Microsoft Word (the language editor).

Full credit goes to Tatjana Kecojevic from the School of Social Sciences for producing material incorporated into this [Reproducible research: Advancing innovation through connectivity Workshop](https://rrmcrsoss.netlify.app/)

## Installing R

- [Rstudio Installation docs](https://posit.co/download/rstudio-desktop/)

After navigating to this website, the download and install R will link you to R installation

![CRAN](../meta/01/download.png)

Next we want to get to the following page and download whichever R version for your system.

![InstallR](../meta/01/installr.png)

Once you have completed the setup and open R, you should see a window similar to this:

![RConsole](../meta/01/Rconsole.png)

This is the graphical user interface for the R language, as opposed to Rstudio, which is much more user-friendly.
\
Alternatively here is a video to walk you through [this](https://www.youtube.com/watch?v=0HzKf-StvOE)

## Installing Rstudio

RStudio is the editor with which we interact with the R language.

- [RStudio Desktop](https://posit.co/download/rstudio-desktop/)

![Rstudio](../meta/01/RstudioIDE.png)

Congratulations, you have installed R and Rstudio and taken your first steps to reproducible research in R.


### First time opening Rstudio


![Rstudio](../meta/01/rstudiowindow.png)

- There is likely a lot to take in right now, and a lot of the text you see infornt of you is currently irrelevant
- However, the tall red section on the left is the Console and that's where you can type in R code to execute. This code is also called commands or functions.

![Rstudio](../meta/01/rstudiopanes.png)

- In the top right section, there's the Environment tab where you can see the data you are currently working on. At first this section is empty because you have not loaded any data yet.
- In the bottom right section there are tabs to flip through the Files and folder structure of your computer (like in Finder or Explorer), Help information etc.

## What everything means in Rstudio

In order to get the following top script editor in your top left pane, you want to use Ctrl/Cmd + N to create a new file. 
Alternatively, navigate to file > new file
Or, use the folling button in the top left of Rstudio window and select new R file

![Rstudio](../meta/01/newfile.png)

![Rstudio](../meta/01/rstudio1.png)

## Getting started with R

In order to get started, lets talk through:

- creating an R script to run some R code
- create a project for your code

### Setting your working directory

If you want to read or write files on your computer from and to a specific location you will need to set a working directory in R. To set the working directory in R to a specific folder on your computer you will use the following:

```{r, eval = FALSE}
# On a windows pc, you would set the working directory like this
setwd("C:/Documents/MyR_Project")

# On a mac, you would set the working directory like this
setwd("~/documents/MyR_Project")
```

Or, using the top dropdown menu

![Rstudio](../meta/01/setwd.png)

Or using the 'More' gear symbol from the bottom right pane

![Rstudio](../meta/01/setwd1.png)

## Project orientated Workflow

However, you should always start a fresh project (File | New Project…) that will automatically set up your working directory without having to point to it in your script file. 

Navigate to the R project button in the top right:

![Rstudio](../meta/01/proj1.png)

When you press this, you will get the following options:

![Rstudio](../meta/01/proj2.png)

Selecting new project, you are greeted with the following options:

![Rstudio](../meta/01/proj3.png)

Selecting New project and New directory:

![Rstudio](../meta/01/proj4.png)

You are now asked to create a project (and folder name) as part of a directory you choose in the second box

![Rstudio](../meta/01/proj5.png)

Congratulations! If you can see the file project name in the top right project button and bottom right file path (next to the home symbol), you have taken you first steps to reproducible research in R!

![Rstudio](../meta/01/proj6.png)

## R packages

"In R, the fundamental unit of shareable code is the package."
— Hadley Wickham, R packages

R packages are collections of functions code, data sets, documentation and tests developed by the community, that are mostly made available on the Comprehensive R Archive Network, or CRAN, the public clearing house for R packages.

These packages are developed by experts in their fields and currently the CRAN package repository features over 14,000 of them. Many of the analyses that they offer are not even available in any of the standard data analysis software packages, which is one of the reasons that R is so successful.

### Installing and Loading R packages

You will likely see something like this in your Rstudio bottom right pane

![Rstudio](../meta/01/pckg.png)

This means that currently the MASS package is installed, to get this on your system you will need to press the install button and type in this package in the box that pops up

![Rstudio](../meta/01/install.png)

**Note:** Note that when you can call the dialogue window to install a package from the Packages pane it runs a command in the console for you. Can you figure out the syntax to install a package in R?

![Package Installation Dialog](../meta/01/install.png)

## A Small Calculation in R

To begin with, we can use R as a calculator.

In your console type in `2 + 2`. Note that you don't have to type the equals sign and that the answer has [1] in front. The [1] indicates that there is only one number in the answer. If the answer contains more than one number it uses numbering like this to indicate where in the 'group' of numbers each one is.

```r
2 + 2
```

You see?! R is like a big calculator!

## Reproducibility: Save your scripts

**Note:** The code you type and want to be executed can be saved in scripts and R Markdown files. Scripts ending with **.R** file extension and R Markdown files, which mixes both R code and Markdown code, end with **.Rmd**.

**Note:** The code that you write just for quick exploration can be written in the console. Code we want to reuse and show off later should be saved as a script.

### Creating New Scripts

To create a new script go through the menu File | New File | R Script or through the green plus button on the top left.

![Creating New Script](../meta/01/NewScript.png)

### Running Scripts

Any code we type in here can be run and executed in the console. Hitting the Run button at the top of the script window will run the line of code on which the cursor is sitting.

To run multiple lines of code, highlight them and click Run.

![Running Scripts](../meta/01/RunScript.png)

**Tip:** Get into the habit of saving your scripts after you create them. Try to save them before running your code in case you write code that makes R crash which sometimes happens.

![Save Script](../meta/01/savescript.png)

## The single most useful R tip

Often, when working with objects in R you may want to start from a new environment, to start from fresh. You may have heard of `rm(list=ls())`.

In order to ensure your analysis is reproducible, save often and restart R often! This ensures R starts with a blank slate and there are no hidden objects or dependencies clogging up your analysis!

![Clear Environment](../meta/01/clear.png)

## File Paths and Organising Projects in R

The use of R project lies in the ease of organisation.

![Working Directory](../meta/01/getwd.png)

Let's create some folders with specific purposes:

- **code** - to hold the R files
- **data** - to hold the data for our analysis
- **(optional) plots/output** - to hold tables and figures etc

![Folder Structure Creation](../meta/01/folder.png)

![Project Structure](../meta/01/struct.png)

Now, let's save a file to our code directory:

![Save to Code Directory](../meta/01/save.png)

Now, our code is saved in a project folder, and we can source it from outside.

### Organising Multiple Files

Let's create a new file that depends on our first file.

**file_1.R:**
```r
answer_1 <- 1 + 1
answer_2 <- 4*5
```

**file_2.R:**
```r
print(answer_1 * answer_2)
```

**file_0_main.R:**
```r
library(here)
source(here("code/file_1.R"))
source(here("code/file_2.R"))
```

## Project Workflow

You may have seen diagrams like this:

![Workflow Diagram](../meta/01/image.png)

Believe it or not, this is essentially what we have just created!

