---
title: "Koan #1: Vectors"
format: html
engine: knitr
filters:
  - webr
  
execute:
  working-directory: ..
---

Intro to the Tidyverse by Colleen O'Briant
Koan #1: Vectors

```{webr-r}
library(testthat)
```

## Question 1
Make the first element of this numeric vector '6'.

```{webr-r}
# Uncomment and fill in the blank:
# result <- c(__, 4, 5, 2, 3)

# Test your answer (uncomment when ready):
# library(testthat)
# expect_equal(result[1], 6)
# expect_equal(length(result), 5)
# print("Question 1 passed!")
```

## Question 2
Make the third element of this character vector 'economics'.

```{webr-r}
# Uncomment and fill in the blank:
# result <- c("apple", "banana", __)

# Test your answer (uncomment when ready):
# library(testthat)
# expect_equal(result[3], "economics")
# expect_equal(length(result), 3)
# print("Question 2 passed!")
```

## Question 3a
Add these two numeric vectors.

```{webr-r}
# Uncomment and fill in the blank:
# result <- c(6, 3, 2) + c(3, 2, 1) == c(__, __, __)

# Test your answer (uncomment when ready):
# library(testthat)
# expect_true(all(result))
# print("Question 3a passed!")
```

## Question 3b
Find the minimum of this vector.

```{webr-r}
# Uncomment and fill in the blank:
# result <- min(c(6, 3, 2)) == __

# Test your answer (uncomment when ready):
# library(testthat)
# expect_true(result)
# print("Question 3b passed!")
```

## Question 3c
Find the sum of all elements of this vector.

```{webr-r}
# Uncomment and fill in the blank:
# result <- sum(c(6, 3, 2)) == __

# Test your answer (uncomment when ready):
# library(testthat)
# expect_true(result)
# print("Question 3c passed!")
```

## Question 3d
Multiply a scalar and a vector.

```{webr-r}
# Uncomment and fill in the blank:
# result <- 100 * c(6, 3, 2) == c(__, __, __)

# Test your answer (uncomment when ready):
# library(testthat)
# expect_true(all(result))
# print("Question 3d passed!")
```

## Question 3e
Divide two vectors.

```{webr-r}
# Uncomment and fill in the blank:
# result <- c(6, 3, 2) / c(2, 3, 1) == c(__, __, __)

# Test your answer (uncomment when ready):
# library(testthat)
# expect_true(all(result))
# print("Question 3e passed!")
```

## Question 4
Create a vector of length 5.

```{webr-r}
# Uncomment and fill in the blank:
# result <- ___

# Test your answer (uncomment when ready):
# library(testthat)
# expect_equal(length(result), 5)
# print("Question 4 passed!")
```

## Question 5
Use the colon operator to create consecutive numbers.

```{webr-r}
# Uncomment and fill in the blank:
# result <- c(2, 3, 4) == __:__

# Test your answer (uncomment when ready):
# library(testthat)
# expect_true(all(result))
# print("Question 5 passed!")
```

## Question 6
Create a random character vector that draws "heads" or "tails".

```{webr-r}
# Uncomment and fill in the blank:
# result <- sample(__, size = 5, replace = TRUE)

# Test your answer (uncomment when ready):
# library(testthat)
# expect_true(all(result %in% c("heads", "tails")))
# expect_equal(length(result), 5)
# print("Question 6 passed!")
```

## Run All Tests
Once you've completed all questions, run this to test everything:

```{webr-r}
library(testthat)

# Test all questions at once
test_results <- list()

# Test 1
tryCatch({
  result1 <- c(6, 4, 5, 2, 3)
  expect_equal(result1[1], 6)
  test_results$q1 <- "PASSED"
}, error = function(e) test_results$q1 <<- "FAILED")

# Test 2  
tryCatch({
  result2 <- c("apple", "banana", "economics")
  expect_equal(result2[3], "economics")
  test_results$q2 <- "PASSED"
}, error = function(e) test_results$q2 <<- "FAILED")

# Test 3a
tryCatch({
  result3a <- c(6, 3, 2) + c(3, 2, 1) == c(9, 5, 3)
  expect_true(all(result3a))
  test_results$q3a <- "PASSED"
}, error = function(e) test_results$q3a <<- "FAILED")

# Test 3b
tryCatch({
  result3b <- min(c(6, 3, 2)) == 2
  expect_true(result3b)
  test_results$q3b <- "PASSED"
}, error = function(e) test_results$q3b <<- "FAILED")

# Test 3c
tryCatch({
  result3c <- sum(c(6, 3, 2)) == 11
  expect_true(result3c)
  test_results$q3c <- "PASSED"
}, error = function(e) test_results$q3c <<- "FAILED")

# Test 3d
tryCatch({
  result3d <- 100 * c(6, 3, 2) == c(600, 300, 200)
  expect_true(all(result3d))
  test_results$q3d <- "PASSED"
}, error = function(e) test_results$q3d <<- "FAILED")

# Test 3e
tryCatch({
  result3e <- c(6, 3, 2) / c(2, 3, 1) == c(3, 1, 2)
  expect_true(all(result3e))
  test_results$q3e <- "PASSED"
}, error = function(e) test_results$q3e <<- "FAILED")

# Test 5
tryCatch({
  result5 <- c(2, 3, 4) == 2:4
  expect_true(all(result5))
  test_results$q5 <- "PASSED"
}, error = function(e) test_results$q5 <<- "FAILED")

print("=== TEST RESULTS ===")
for(i in 1:length(test_results)) {
  cat(names(test_results)[i], ":", test_results[[i]], "\n")
}
```
